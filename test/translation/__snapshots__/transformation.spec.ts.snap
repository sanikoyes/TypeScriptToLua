// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transformation (blockScopeVariables) 1`] = `
"do
    local a = 1
    local b = 1
    local ____ = {c = 1}
    local c = ____.c
end"
`;

exports[`Transformation (characterEscapeSequence) 1`] = `
"quoteInDoubleQuotes = \\"' ' '\\"
quoteInTemplateString = \\"' ' '\\"
doubleQuoteInQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
doubleQuoteInDoubleQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
doubleQuoteInTemplateString = \\"\\\\\\" \\\\\\" \\\\\\"\\"
backQuoteInQuotes = \\"\` \` \`\\"
backQuoteInDoubleQuotes = \\"\` \` \`\\"
backQuoteInTemplateString = \\"\` \` \`\\"
escapedCharsInQuotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" ' \`\\"
escapedCharsInDoubleQuotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" ' \`\\"
escapedCharsInTemplateString = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" ' \`\\"
nonEmptyTemplateString = (\\"Level 0: \\\\n\\\\t \\" .. ((\\"Level 1: \\\\n\\\\t\\\\t \\" .. ((\\"Level 3: \\\\n\\\\t\\\\t\\\\t \\" .. \\"Last level \\\\n --\\") .. \\" \\\\n --\\")) .. \\" \\\\n --\\")) .. \\" \\\\n --\\""
`;

exports[`Transformation (exportStatement) 1`] = `
"local ____exports = {}
local xyz = 4
____exports.xyz = xyz
____exports.uwv = xyz
do
    local ____export = require(\\"xyz\\")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= \\"default\\" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____xyz = require(\\"xyz\\")
    local abc = ____xyz.abc
    local def = ____xyz.def
    ____exports.abc = abc
    ____exports.def = def
end
do
    local ____xyz = require(\\"xyz\\")
    local def = ____xyz.abc
    ____exports.def = def
end
return ____exports"
`;

exports[`Transformation (globalAugmentation) 1`] = `
"local ____exports = globalVariable
return ____exports"
`;

exports[`Transformation (methodRestArguments) 1`] = `
"local lualib_bundle = require(\\"lualib_bundle\\");
local _ENV = setmetatable({}, { __index = lualib_bundle })
pcall(function() setfenv(1, _ENV) end)
MyClass = __TS__Class()
MyClass.name = \\"MyClass\\"
function MyClass.prototype.____constructor(self)
end
function MyClass.prototype.varargsFunction(self, a, ...)
end"
`;

exports[`Transformation (modulesChangedVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = 1
return ____exports"
`;

exports[`Transformation (modulesClassExport) 1`] = `
"local lualib_bundle = require(\\"lualib_bundle\\");
local _ENV = setmetatable({}, { __index = lualib_bundle })
pcall(function() setfenv(1, _ENV) end)
local ____exports = {}
____exports.TestClass = __TS__Class()
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
function TestClass.prototype.____constructor(self)
end
return ____exports"
`;

exports[`Transformation (modulesClassWithMemberExport) 1`] = `
"local lualib_bundle = require(\\"lualib_bundle\\");
local _ENV = setmetatable({}, { __index = lualib_bundle })
pcall(function() setfenv(1, _ENV) end)
local ____exports = {}
____exports.TestClass = __TS__Class()
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
function TestClass.prototype.____constructor(self)
end
function TestClass.prototype.memberFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionExport) 1`] = `
"local ____exports = {}
function ____exports.publicFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionNoExport) 1`] = `
"function publicFunc(self)
end"
`;

exports[`Transformation (modulesImportAll) 1`] = `
"local ____exports = {}
local Test = require(\\"test\\")
local ____ = Test
return ____exports"
`;

exports[`Transformation (modulesImportNamed) 1`] = `
"local ____exports = {}
local ____test = require(\\"test\\")
local TestClass = ____test.TestClass
local ____ = TestClass
return ____exports"
`;

exports[`Transformation (modulesImportNamedSpecialChars) 1`] = `
"local ____exports = {}
local ____kebab_2Dmodule = require(\\"kebab-module\\")
local TestClass1 = ____kebab_2Dmodule.TestClass1
local ____dollar_24module = require(\\"dollar$module\\")
local TestClass2 = ____dollar_24module.TestClass2
local ____singlequote_27module = require(\\"singlequote'module\\")
local TestClass3 = ____singlequote_27module.TestClass3
local ____hash_23module = require(\\"hash#module\\")
local TestClass4 = ____hash_23module.TestClass4
local ____space_20module = require(\\"space module\\")
local TestClass5 = ____space_20module.TestClass5
local ____ = TestClass1
local ____ = TestClass2
local ____ = TestClass3
local ____ = TestClass4
local ____ = TestClass5
return ____exports"
`;

exports[`Transformation (modulesImportRenamed) 1`] = `
"local ____exports = {}
local ____test = require(\\"test\\")
local RenamedClass = ____test.TestClass
local ____ = RenamedClass
return ____exports"
`;

exports[`Transformation (modulesImportRenamedSpecialChars) 1`] = `
"local ____exports = {}
local ____kebab_2Dmodule = require(\\"kebab-module\\")
local RenamedClass1 = ____kebab_2Dmodule.TestClass
local ____dollar_24module = require(\\"dollar$module\\")
local RenamedClass2 = ____dollar_24module.TestClass
local ____singlequote_27module = require(\\"singlequote'module\\")
local RenamedClass3 = ____singlequote_27module.TestClass
local ____hash_23module = require(\\"hash#module\\")
local RenamedClass4 = ____hash_23module.TestClass
local ____space_20module = require(\\"space module\\")
local RenamedClass5 = ____space_20module.TestClass
local ____ = RenamedClass1
local ____ = RenamedClass2
local ____ = RenamedClass3
local ____ = RenamedClass4
local ____ = RenamedClass5
return ____exports"
`;

exports[`Transformation (modulesImportWithoutFromClause) 1`] = `
"local ____exports = {}
require(\\"test\\")
return ____exports"
`;

exports[`Transformation (modulesNamespaceExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
return ____exports"
`;

exports[`Transformation (modulesNamespaceNestedWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    TestSpace.TestNestedSpace = {}
    local TestNestedSpace = TestSpace.TestNestedSpace
    do
        function TestNestedSpace.innerFunc(self)
        end
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceNoExport) 1`] = `"TestSpace = TestSpace or ({})"`;

exports[`Transformation (modulesNamespaceWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    function TestSpace.innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceWithMemberNoExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
do
    local function innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = \\"bar\\"
return ____exports"
`;

exports[`Transformation (modulesVariableNoExport) 1`] = `"foo = \\"bar\\""`;

exports[`Transformation (returnDefault) 1`] = `
"function myFunc(self)
    return
end"
`;

exports[`Transformation (topLevelVariables) 1`] = `
"obj = {value1 = 1, value2 = 2}
value1 = obj.value1
value2 = obj.value2
obj2 = {value3 = 1, value4 = 2}
value3 = obj2.value3
value4 = obj2.value4
function fun1(self)
end
fun2 = function()
end"
`;

exports[`Transformation (unusedDefaultWithNamespaceImport) 1`] = `
"local ____exports = {}
local x = require(\\"module\\")
local ____ = x
return ____exports"
`;
